import Head from "next/head";
import Navbar from "../components/Navbar";
import Footer from "../components/Footer";
import { sanityClient, urlFor } from "../../../sanity";
import type { Post } from "../../../typings";
import type { GetStaticProps } from "next";
import Image from "next/image";
import PortableText from 'react-portable-text'
import React from "react";

interface Props {
  post: Post
}

export default function Post({ post }: Props,) {
  
  return (
  <>
    <Head>
        <title>CodeIT - Gu√≠as</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link
          rel="apple-touch-icon"
          sizes="180x180"
          href="/apple-touch-icon.ico"
        />
        <link rel="icon" sizes="32x32" href="/favicon-32x32.ico" />
        <link rel="icon" sizes="16x16" href="/favicon-16x16.ico" />
    </Head>
    <Navbar />
    <article className="max-w-3xl mx-auto p-5">
      <h3 className="text-2xl text-white font-bold">{post.description}</h3>
      <div className="mt-10">
        <PortableText
        content={post.body}
        dataset={process.env.NEXT_PUBLIC_SANITY_DATASET}
        projectId={process.env.NEXT_PUBLIC_SANITY_PROJECT_ID}
        serializers={
          {
            h1: (props: object)=> (
              <h1 className="text-2xl text-gray-400 font-bold my-5" {...props}/>
            ),
            h2: (props: object) => (
              <h2 className="text-xl text-gray-400 font-bold my-5" {...props}/>
            ),
            h4: (props: object) => (
                <h4 className="text-md text-gray-400 font-semibold my-5" {...props}/>  
            ),
            p: (props: object) => (
              <p className=" text-white  my-5" {...props}/>
            ),
          }
        }
        />
      </div>
      <div className="flex items-center space-x-2">
        <Image
        className="rounded-full"
        width={50}
        height={0}
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        src={urlFor(post.author.image).url()!}
        alt="author"
        />
        <p className="font-extralight text-gray-300 text-sm">
          Nota hecha por <span className="text-green-600">{post.author.name}</span> - Publicado el {new Date(post._createdAt).toLocaleDateString()}
        </p>
      </div>
    </article>
    <Footer />
    </>
  )
}

export const getStaticPaths = async () => {
  const query = `*[_type == 'post']{
    _id,
    slug {
      current
    },
  }`

  const posts = await sanityClient.fetch(query)
  
  const paths = posts.map((post: Post) => ({
    params: {
      slug: post.slug.current
    }
  }))

  return {
    paths,
    fallback: 'blocking'
  }
}

export const getStaticProps: GetStaticProps = async ({ params }) =>{
  const query = `*[_type == 'post' && slug.current == $slug][0]{
    _id,
    _createdAt,
    title,
    author-> {
      name,
      image
    },
    description,
    mainImage,
    slug,
    body
  }`

  const post = await sanityClient.fetch(query, {slug: params?.slug})

  if (!post) {
    return {
      notFound: true
    }
  }

  return {
    props: {
      post, 
    },
    revalidate: 20,
  }
}